#!/bin/bash

# i think this is better that this happen here, as this is the first thing the
# scripts will do

# list of blocked SIGNAL
BLOCKED_SIG=(
	"SIGINT"
	"SIGQUIT"
	"SIGTSTP"
	"exit"
)

# trap BLOCKED_SIG to jail::clean
trap "jail::clean" ${BLOCKED_SIG[@]}

## STRICT MODE
## Exit on non zero return code
set -e
## Unknown Var
set -u
## if a command in a pipe failed
set -o pipefail
## Setting IFS (Internal Field Separator), disable considering word separated by space
IFS=$'\n\t'

# building user home folder
## Base home folder
BASE_HOME=/home
## user home folder
BASE_HOME="${BASE_HOME}/${USER}"
## jail base path
JAILS_PATH="${BASE_HOME}/.jails"
## max jail per user
MAX_JAIL=5

# multiple jail
## generate id, zero padded, if MAX_JAIL=10, go through 00, 01, 02 and so on
for jail_id in $(seq -w 0 ${MAX_JAIL}); do
	## the first non dir path is selected and go out the loop
	if [ ! -d "${JAILS_PATH}/jail_0x${jail_id}" ]; then
		JAIL_PATH="${JAILS_PATH}/jail_0x${jail_id}"
		break
	fi
	## if we reach the MAX_JAIL
	if [ "${jail_id}" == "${MAX_JAIL}" ]; then
		printf "error: no jail left\n"
		trap - ${BLOCKED_SIG[@]}
		exit
	fi
done

# allowed command to the chroot jail
ALLOWED_CMD=(
	'bash'
	'cat'
	'du'
	'less'
	'ls'
	'rm'
	'clear'
	'vim'
)

# used command, using the path so no alias or nasty stuff will interfer
declare -A CMD=(
	['printf']=0
	['rm']=0
	['mkdir']=0
	['cp']=0
	['find']=0
	['ldd']=0
	['perl']=0
	['sort']=0
	['unshare']=0
	['bwrap']=0
	['env']=0
	['[']=0
)

# export cmd path as value of the named array
for key in ${!CMD[@]}; do
	CMD[${key}]="$(type -P ${key})"
done

##BEGIN#________________________>#_|FUNCTION|_#<______________________________##

function	utils::mkdir()
{
	: "
	INFO
		LIB				utils
		FUNCTION		mkdir
		DESC			make a dir. if dir_path is a file, then deleted it, after
						this check if dir_path is a dir, if so delet it, finaly
						check if dir_path is not a dir, if so created it.
						in this way i ensure that the dir_path is created
		ARG				[1] dir_path=${1:-}
	"
	local	dir_path="${1:-}"

	"${CMD['[']}" -f "${dir_path}" ] && "${CMD['rm']}" -f "${dir_path}"
	"${CMD['[']}" -d "${dir_path}" ] && "${CMD['rm']}" -rf "${dir_path}"
	"${CMD['[']}" ! -d "${dir_path}" ] && "${CMD['mkdir']}" -p "${dir_path}"
}


function	jail::configure_prompt()
{
	: "
	INFO
		LIB				jail
		FUNCTION		configure_prompt
		DESC			configure a cool prompt for the jailed prisoner :)
		ARG				[?] JAIL_PATH=${JAIL_PATH}
	"
	local	c_r=$("${CMD['printf']}" '%b' '\[\x1b[31m\]')
	local	c_y=$("${CMD['printf']}" '%b' '\[\x1b[33m\]')
	local	c_g=$("${CMD['printf']}" '%b' '\[\x1b[32m\]')
	local	c_u=$("${CMD['printf']}" '%b' '\[\x1b[4m\]')
	local	rst=$("${CMD['printf']}" '%b' '\[\x1b[0m\]')

	prompt="${c_r}${USER}"
	prompt+="ðŸ”’"
	prompt+="${c_y}\\h${rst}"
	prompt+=" [ ${c_g}${c_u}\\w${rst} ] $ "

	# happened the cool prompt on the default bash.bashrc
	"${CMD['printf']}" "PS1=\"${prompt}\"\n" > "${JAIL_PATH}/etc/bash.bashrc"
}

function	jail::hardening::unset_bash_function()
{
	# unset bash built-in
	unset -f env
}

function	jail::hardening()
{
	jail::hardening::unset_bash_function
}

function	jail::copy_command()
{
	: "
	INFO
		LIB				jail
		FUNCTION		copy_command
		DESC			copy given ALLOWED_CMD to ${HOME}/.jail with their
						assosiated library
		ARG				[?] ALLOWED_CMD=${ALLOWED_CMD[@]}
						[?] JAIL_PATH=${JAIL_PATH}
	"
	local		command_path
	local		base_dir
	declare	-a	library

	for command in "${ALLOWED_CMD[@]}"; do
		# get real path not an nasty aliases or something else
		command_path=$(type -P "${command}")
		# cp command path to ${JAIL_PATH}/bin
		"${CMD['[']}" "${command_path}" ] && "${CMD['cp']}" "${command_path}" "${JAIL_PATH}/bin"
	done

	library=($(\
	for command_path in $("${CMD['find']}" "${JAIL_PATH}/bin" -type f -executable -print); do
		# for each executable in ${JAIL_PATH}/bin, get the associated shared library path
		"${CMD['ldd']}" "${command_path}" | "${CMD['perl']}" -ne "print if s|^.*?(/lib.*?) .*$|\1|g"
	# uniq the output to get uniq shared library path
	done | "${CMD['sort']}" -u))

	# copy library
	for element in ${library[@]}; do
		base_dir="${JAIL_PATH}${element%\/*}"
		"${CMD['mkdir']}" -p "${base_dir}"
		"${CMD['cp']}" "${element}" "${base_dir}"
	done

	# copy database of term to allow ctrl+l to clear the screen
	"${CMD['cp']}" -r /lib/terminfo "${JAIL_PATH}/etc/"
}

function	jail::mkdir()
{
	: "
	INFO
		LIB				jail
		FUNCTION		mkdir
		DESC			make all necessary dir for the jail
		ARG				[?] JAIL_PATH=${JAIL_PATH}
	"
	utils::mkdir "${JAIL_PATH}"
	utils::mkdir "${JAIL_PATH}/bin"
	utils::mkdir "${JAIL_PATH}/etc"
	utils::mkdir "${JAIL_PATH}/lib"
	utils::mkdir "${JAIL_PATH}/lib64"
	utils::mkdir "${JAIL_PATH}/home"
}

function	jail::prepare()
{
	: "
	INFO
		LIB				jail
		FUNCTION		prepare
		DESC			prepare phase of the jail
	"
	jail::mkdir
	jail::copy_command
	jail::hardening
	jail::configure_prompt
}

function	jail::clean()
{
	: "
	INFO
		LIB				jail
		FUNCTION		clean
		DESC			clean jail, called at the end and traped to BLOCKED_SIG
		ARG				[?] BLOCKED_SIG=${BLOCKED_SIG[@]}
						[?] JAIL_PATH=${JAIL_PATH}
	"
	# remove ${JAIL_PATH}
	"${CMD['[']}" -d "${JAIL_PATH}" ] && "${CMD['rm']}" -rf "${JAIL_PATH}"
	# untrap blocked signal
	trap - ${BLOCKED_SIG[@]}
	# exit
	exit
}

##END#__________________________<#_|FUNCTION|_#>______________________________##

##BEGIN#__________________________>#_|MAIN|_#<________________________________##

function	jail::entry()
{
	: "
	INFO
		LIB				jail
		FUNCTION		entry
		DESC			main entry to the jail, it prepare, launch and then
						clean the jail
		ARG				[?] JAIL_PATH=${JAIL_PATH}
						[?] BASE_HOME=${BASE_HOME}
	"
	jail::prepare
	"${CMD['unshare']}" \
		--map-user=$(id -ru) \
		--map-group=$(id -rg) \
		--pid \
		--kill-child=SIGQUIT \
		"${CMD['bwrap']}" \
			--bind "${JAIL_PATH}" / \
			--dev-bind "${BASE_HOME}" "/home/${USER}" \
			--unshare-all \
			--chdir "/home/${USER}" \
			--clearenv \
			--setenv PROMPT_DIRTRIM "2" \
			--setenv LS_COLORS "${LS_COLORS}" \
			--setenv TERM "${TERM}" \
			--hostname jailed \
			"/bin/bash"
	: "
	unshare
		--map-user=UID
			> create a namespace for the User ID
		--map-group=GID
			> create a namespace for the Group ID
		--pid
			> create a namespace for the PID (launch the command as PID 1)
		--kill-child=SIG
			> kill the child with a specific SIG
	bwrap
		--bind SRC DST
			> set the root of the chroot
		--dev-bind SRC DST
			> bind the home to /home/${USER}, so the home is accessible from the
			chroot
		--unshare-all
			> unshare all remaining available namespaces
		--chdir DST
			> change starting dir to /home/${USER}
		--clearenv
			> unset all env variable
		--setenv KEY "VALUE"
			> set env variable name, KEY, to the given VALUE
			PROMPT_DIRTRIM	-> set the number of dir to display on the prompt
			LS_COLORS		-> fancy color on ls
			TERM			-> set the current shell
		--hostname HOSTNAME
			> set the unshared
		/bin/bash
			> set the executable to be the PID 1
	"
	jail::clean
}

jail::entry

##END#____________________________<#_|MAIN|_#>________________________________##
